{"name":"Structure Token","permission":{"default":0,"eC9B4k0LaO1597E7":3},"type":"script","flags":{"core":{"sourceId":"Macro.QwWNUKDeT8QcV1Hs"}},"scope":"global","command":"(async ()=>{\n    \n    if (canvas.tokens.controlled.length !== 1) {\n        ui.notifications.error(\"Select one and only one token\");\n        return;\n    }\n\n    let actor = canvas.tokens.controlled[0].actor;\n\n    if (!(\"mech\" in actor.data.data)) {\n        ui.notifications.error(\"Selected token is not a mech\");\n        return;\n    }\n\n    // Table of descriptions\n    function structTableD(roll) {\n        switch(roll) {\n            // Used for multiple ones\n            case 0: \n                return \"Your mech is damaged beyond repair – it is destroyed. You may still exit it as normal.\";\n            case 1:\n                switch (remStruct) {\n                    case 2:\n                        // Choosing not to auto-roll the checks to keep the suspense up\n                        return \"Roll a HULL check. On a success, your mech is STUNNED until the end of your next turn. On a failure, your mech is destroyed.\";\n                    case 1:\n                        return \"Your mech is destroyed.\";\n                    default:\n                        return \"Your mech is STUNNED until the end of your next turn.\";\n                }\n            case 2:\n            case 3:\n            case 4:\n                // Idk, should this auto-roll?\n                return \"Parts of your mech are torn off by the damage. Roll 1d6. On a 1–3, all weapons on one mount of your choice are destroyed; on a 4–6, a system of your choice is destroyed. LIMITED systems and weapons that are out of charges are not valid choices. If there are no valid choices remaining, it becomes the other result. If there are no valid systems or weapons remaining, this result becomes a DIRECT HIT instead.\";\n            case 5:\n            case 6:\n                return \"Emergency systems kick in and stabilize your mech, but it’s IMPAIRED until the end of your next turn.\";\n        }\n    }\n\n    // Table of titles\n    let structTableT = [\n        \"Crushing Hit\", \n        \"Direct Hit\",\n        \"System Trauma\",\n        \"System Trauma\",\n        \"System Trauma\",\n        \"Glancing Blow\",\n        \"Glancing Blow\"\n    ]\n\n\n    actor.data.data.mech.structure.value -= 1;\n    let remStruct = actor.data.data.mech.structure.value;\n\n    // If we're already at 0 just kill em\n    if(remStruct > 0) {\n        let damage = actor.data.data.mech.structure.max\n            - actor.data.data.mech.structure.value;\n    \n        let roll = new Roll(`${damage}d6kl1`).roll();\n        let result = roll.total;\n    \n        let tt = await roll.getTooltip();\n        let title = structTableT[result];\n        let text = structTableD(result);\n    \n        // Crushing hits\n        let one_count = roll.terms[0].results.reduce((a, v) => {\n            return v.result === 1 ? a + 1 : a;\n        }, 0);\n        if (one_count > 1) {\n            text = structTableD(result);\n            title = structTableT[0];\n        }\n        let card = `\n        <div class=\"card clipped-bot\" style=\"margin: 0px;\">\n        <div class=\"lancer-stat-header clipped-top\">// STRUCTURING //</div>\n        <div class=\"dice-roll lancer-dice-roll\">\n            <div class=\"dice-result\">\n            <div class=\"dice-formula lancer-dice-formula flexrow\">\n                <span class=\"dice-total lancer-dice-total major\">${title}</span>\n            </div>\n            <div style=\"text-align: left;\">\n                ${tt}\n            </div>\n            </div>\n        </div>\n        ${text}\n        </div>\n        `\n        ChatMessage.create(\n            {\n                roll: roll,\n                speaker: ChatMessage.getSpeaker(),\n                content: card\n            }\n        );\n    } else {\n        // You ded\n        let title = structTableT[0];\n        let text = structTableD(0);\n        let card = `\n        <div class=\"card clipped-bot\" style=\"margin: 0px;\">\n        <div class=\"lancer-stat-header clipped-top\">// STRUCTURING //</div>\n        <div class=\"dice-roll lancer-dice-roll\">\n            <div class=\"dice-result\">\n            <div class=\"dice-formula lancer-dice-formula flexrow\">\n                <span class=\"dice-total lancer-dice-total major\">${title}</span>\n            </div>\n            </div>\n        </div>\n        ${text}\n        </div>\n        `\n        ChatMessage.create(\n            {\n                speaker: ChatMessage.getSpeaker(),\n                content: card\n            }\n        );\n    }\n})();","author":"eC9B4k0LaO1597E7","img":"systems/lancer/assets/icons/condition_shredded.svg","actorIds":[],"_id":"jpXXFQf7CUluGqQn"}
{"name":"Overheat Token","permission":{"default":0,"eC9B4k0LaO1597E7":3},"type":"script","flags":{"core":{"sourceId":"Macro.bzlNd5XL876ZeG16"}},"scope":"global","command":"(async ()=>{\n    \n    if (canvas.tokens.controlled.length !== 1) {\n        ui.notifications.error(\"Select one and only one token\");\n        return;\n    }\n\n    let actor = canvas.tokens.controlled[0].actor;\n\n    if (!(\"mech\" in actor.data.data)) {\n        ui.notifications.error(\"Selected token is not a mech\");\n        return;\n    }\n\n    // Table of descriptions\n    function stressTableD(roll) {\n        switch(roll) {\n            // Used for multiple ones\n            case 0: \n                return \"The reactor goes critical – your mech suffers a reactor meltdown at the end of your next turn.\";\n            case 1:\n                switch (remStress) {\n                    case 2:\n                        // Choosing not to auto-roll the checks to keep the suspense up\n                        return \"Roll an ENGINEERING check. On a success, your mech is EXPOSED; on a failure, it suffers a reactor meltdown after 1d6 of your turns (rolled by the GM). A reactor meltdown can be prevented by retrying the ENGINEERING check as a free action.\";\n                    case 1:\n                        return \"Your mech suffers a reactor meltdown at the end of your next turn.\";\n                    default:\n                        return \"Your mech becomes Exposed.\";\n                }\n            case 2:\n            case 3:\n            case 4:\n                return \"The power plant becomes unstable, beginning to eject jets of plasma. Your mech becomes EXPOSED, taking double kinetic, explosive and electric damage until the status is cleared.\";\n            case 5:\n            case 6:\n                return \"Your mech’s cooling systems manage to contain the increasing heat; however, your mech becomes IMPAIRED until the end of your next turn.\";\n        }\n    }\n\n    // Table of titles\n    let stressTableT = [\n        \"Irreversible Meltdown\", \n        \"Meltdown\",\n        \"Destabilized Power Plant\",\n        \"Destabilized Power Plant\",\n        \"Destabilized Power Plant\",\n        \"Emergency Shunt\",\n        \"Emergency Shunt\"\n    ]\n\n\n    actor.data.data.mech.stress.value -= 1;\n    let remStress = actor.data.data.mech.stress.value;\n\n    // If we're already at 0 just kill em\n    if(remStress > 0) {\n        let damage = actor.data.data.mech.stress.max\n            - actor.data.data.mech.stress.value;\n    \n        let roll = new Roll(`${damage}d6kl1`).roll();\n        let result = roll.total;\n    \n        let tt = await roll.getTooltip();\n        let title = stressTableT[result];\n        let text = stressTableD(result);\n    \n        // Crushing hits\n        let one_count = roll.terms[0].results.reduce((a, v) => {\n            return v.result === 1 ? a + 1 : a;\n        }, 0);\n        if (one_count > 1) {\n            text = stressTableD(result);\n            title = stressTableT[0];\n        }\n        let card = `\n        <div class=\"card clipped-bot\" style=\"margin: 0px;\">\n        <div class=\"lancer-stat-header clipped-top\">// OVERHEATING //</div>\n        <div class=\"dice-roll lancer-dice-roll\">\n            <div class=\"dice-result\">\n            <div class=\"dice-formula lancer-dice-formula flexrow\">\n                <span class=\"dice-total lancer-dice-total major\">${title}</span>\n            </div>\n            <div style=\"text-align: left;\">\n                ${tt}\n            </div>\n            </div>\n        </div>\n        ${text}\n        </div>\n        `\n        ChatMessage.create(\n            {\n                roll: roll,\n                speaker: ChatMessage.getSpeaker(),\n                content: card\n            }\n        );\n    } else {\n        // You ded\n        let title = stressTableT[0];\n        let text = stressTableD(0);\n        let card = `\n        <div class=\"card clipped-bot\" style=\"margin: 0px;\">\n        <div class=\"lancer-stat-header clipped-top\">// OVERHEATING //</div>\n        <div class=\"dice-roll lancer-dice-roll\">\n            <div class=\"dice-result\">\n            <div class=\"dice-formula lancer-dice-formula flexrow\">\n                <span class=\"dice-total lancer-dice-total major\">${title}</span>\n            </div>\n            </div>\n        </div>\n        ${text}\n        </div>\n        `\n        ChatMessage.create(\n            {\n                speaker: ChatMessage.getSpeaker(),\n                content: card\n            }\n        );\n    }\n})();","author":"eC9B4k0LaO1597E7","img":"systems/lancer/assets/icons/damage_heat.svg","actorIds":[],"_id":"mx74sKZQISSCJ59x"}
